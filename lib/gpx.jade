doctype xml

mixin gpx()
  gpx&attributes(getSchema(attributes, garmin))
    if block
      block

mixin waypoint(step)
  if step.arrival_time
    time= getTimestamp(step)
  if step.name
    name= step.name
  if garmin
    if step.notes
      cmt= step.notes
      desc= step.notes
  else
    - var cmt = getComment(step);
    if cmt
      cmt= cmt
      desc= cmt
  if step.url
    link(href=step.url)
  - var symbol = getSymbol(step);
  if symbol
    sym= symbol
  if block
    block

mixin rte(route)
  rte
    if route.name
      name= route.name
    if route.desc
      desc= route.desc
    if route.link
      link(href=route.link)
    if block
      block

mixin trk(track)
  trk
    if track.name
      name= track.name
    if track.desc
      desc= track.desc
    if track.link
      link(href=track.link)
    if block
      block

mixin wpt_ext(step)
  gpxx:WaypointExtension
    if step.tags && step.tags.length
      gpxx:Categories
        for cat in step.tags
          gpxx:Category= cat
    if step.address
      gpxx:Address
        if streetAddress(step)
          gpxx:StreetAddress= streetAddress(step)
        if step.locality
          if step.locality.town
            gpxx:City= step.locality.town
          if step.locality.province
            gpxx:State= step.locality.province
          if step.locality.country_long
            gpxx:Country= step.locality.country_long
    if step.phone
      gpxx:PhoneNumber= step.phone

mixin rte_ext(route)
  gpxx:RouteExtension
    gpxx:IsAutoNamed false
    gpxx:DisplayColor Blue
  if (route.mode !== undefined || (metadata && metadata.mode !== undefined))
    trp:Trip
      //- The <trp:TransportationMode> extension tells the devices Trip Planner algorithm what calculation type to use:
      //- Automotive, Motorcycling, Walking, Bicycling, Direct.
      trp:TransportationMode= getMode(route.mode, metadata && metadata.mode)
    if (metadata && metadata.name) || route.arrival_time || route.day
      tmd:TripMetaData
        tmd:TripName= (metadata && metadata.name) || ''
        if route.arrival_time
          tmd:Date= getTimestamp(route)
        if route.day
          tmd:DayNumber= route.day

mixin rtept_ext(route, step, index, next)
  if isStop(step) || index % 124 === 0 || !next
    //- The <trp:ViaPoint> is equivalent to a Furkot Stop.
    trp:ViaPoint
      if step.departure_time && next
        trp:DepartureTime= getDeparture(step)
      if index && next
        - var dur = formatDuration(step);
        if dur
          trp:StopDuration= dur
      if step.arrival_time && index > 0
        trp:ArrivalTime= getTimestamp(step)
      trp:CalculationMode FasterTime
      trp:ElevationMode Standard
  else
    //- The <trp:ShapingPoint> is equivalent to Furkot Pass-through Points.
    //- These points are displayed in the Route point list on the GPS but are not announced during navigation.
    //- There can be up to 124 ShapingPoints between each ViaPoint.
    trp:ShapingPoint
  if next && next.mode !== undefined
    //- The <vptm:ViaPointTransportationMode> extension tells the devices Trip Planner algorithm
    //- what calculation type to use between this and next point:
    //- Automotive, Motorcycling, Walking, Bicycling, Direct.
    vptm:ViaPointTransportationMode
      vptm:TransportationMode= getMode(next.mode)
  if RoutePointExtension
    gpxx:RoutePointExtension
      //- The <gpxx:Subclass> is a special Garmin code for older Garmin devices that do not use
      //- the Trip Planner algorithm. This specific code says to use the above RoutePoint as a waypoint.
      //- Older Garmin devices don't use the Trip Planner algorithm.
      gpxx:Subclass 000000000000FFFFFFFFFFFFFFFFFFFFFFFF
      - var expanded = next && next.track;
      if expanded && expanded.length
        for p in expanded
          //- All of the <gpxx:rpt> are equivalent to Furkot Track Points generated between Stops.
          //- These points are not displayed on the GPS or announced during navigation.
          gpxx:rpt(
              lat=p[0].toFixed(5)
              lon=p[1].toFixed(5)
            )
        - var p = expanded[expanded.length - 1];
        gpxx:rpt(
            lat=p[0].toFixed(5)
            lon=p[1].toFixed(5)
          )
          gpxx:Subclass 000000000000FFFFFFFFFFFFFFFFFFFFFFFF

mixin trk_ext(track)
  - var color = getColor(track);
  if color
    extensions
      gpxx:TrackExtension
        gpxx:DisplayColor= color

+gpx(
      xmlns="http://www.topografix.com/GPX/1/1"
      creator="http://furkot.com/"
      version="1.1"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  )
  if metadata
    metadata
      if metadata.name
        name= metadata.name
      if metadata.desc
        desc= metadata.desc
      if metadata.link
        link(href=metadata.link)
      if metadata.author
        author
          name= metadata.author.name
          if metadata.author.email
            email(id=metadata.author.email.id, domain=metadata.author.email.domain)
          if metadata.author.link
            link(href=metadata.author.link)
              text= metadata.author.short_name
  if waypoints
    for step in waypoints
      if step.coordinates
        wpt(
            lat=step.coordinates.lat.toFixed(5)
            lon=step.coordinates.lon.toFixed(5)
          )
          +waypoint(step)
            if step.address || step.phone
              extensions
                +wpt_ext(step)
          
  if routes
    for route in routes
      +rte(route)
        if garmin
          extensions
            +rte_ext(route)
        if route.points
          each step, index in route.points
            if step.coordinates
              rtept(
                  lat=step.coordinates.lat.toFixed(5)
                  lon=step.coordinates.lon.toFixed(5)
                )
                +waypoint(step)
                  if garmin
                    extensions
                      +rtept_ext(route, step, index, route.points[index + 1])
  if tracks
    for track in tracks
      +trk(track)
        if track.points
          +trk_ext(track)
          for step in track.points
            - var expanded = step.track;
            if expanded && expanded.length
              trkseg
                for p in expanded
                  trkpt(
                      lat=p[0].toFixed(5)
                      lon=p[1].toFixed(5)
                    )
